name: Web CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18.x'
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  CACHE_NPM: npm
  CACHE_BUILD: build

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Check for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ${{ env.CACHE_NPM }}

      - name: Install dependencies
        run: npm ci
        working-directory: src/web

      - name: Run npm audit
        run: npm audit
        working-directory: src/web

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: src/web

      - name: Run Snyk container scan
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.DOCKER_REGISTRY }}/web-frontend:${{ github.sha }}

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: ${{ env.CACHE_NPM }}

      - name: Install dependencies
        run: npm ci
        working-directory: src/web

      - name: Run ESLint
        run: npm run lint
        working-directory: src/web

      - name: Run TypeScript checks
        run: npm run typecheck
        working-directory: src/web

      - name: Run tests with coverage
        run: npm run test:coverage
        working-directory: src/web

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: src/web/coverage

  build:
    name: Build and Push
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: src/web
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/web-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SLSA provenance
        uses: slsa-framework/slsa-github-generator@v1
        with:
          artifact-path: ${{ env.DOCKER_REGISTRY }}/web-frontend:${{ github.sha }}

  deploy:
    name: Deploy
    needs: [build]
    runs-on: ubuntu-latest
    environment: production
    concurrency: production_environment
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS
        run: |
          aws ecs update-service \
            --cluster web-cluster \
            --service web-frontend \
            --force-new-deployment \
            --task-definition $(aws ecs register-task-definition \
              --family web-frontend \
              --container-definitions '[{
                "name": "web-frontend",
                "image": "${{ env.DOCKER_REGISTRY }}/web-frontend:${{ github.sha }}",
                "cpu": 256,
                "memory": 512,
                "portMappings": [{"containerPort": 80}],
                "healthCheck": {
                  "command": ["CMD-SHELL", "curl -f http://localhost:80/health || exit 1"],
                  "interval": 30,
                  "timeout": 5,
                  "retries": 3
                }
              }]' \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text)

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster web-cluster \
            --services web-frontend

      - name: Verify deployment
        run: |
          ENDPOINT=$(aws ecs describe-services \
            --cluster web-cluster \
            --services web-frontend \
            --query 'services[0].loadBalancers[0].targetGroupArn' \
            --output text)
          curl -f https://${ENDPOINT}/health || exit 1

      - name: Send deployment notification
        if: always()
        uses: slackapi/slack-github-action@v1
        with:
          channel-id: 'deployments'
          slack-message: |
            *Web Frontend Deployment Status*: ${{ job.status }}
            Environment: Production
            Version: ${{ github.sha }}
            Deployed by: ${{ github.actor }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}