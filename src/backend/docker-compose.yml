version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: backend-api
    ports:
      - "3000:3000"  # API port
      - "3001:3001"  # WebSocket port
    environment:
      - NODE_ENV=development
      - PORT=3000
      - WEBSOCKET_PORT=3001
      - DATABASE_URL=postgresql://user:password@postgres:5432/delayed_messaging
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis-password}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
      - JWT_EXPIRY=24h
      - REFRESH_TOKEN_EXPIRY=7d
      - MIN_MESSAGE_DELAY=30
      - MAX_MESSAGE_DELAY=60
      - LOG_LEVEL=debug
      - RATE_LIMIT_WINDOW=15
      - RATE_LIMIT_MAX_REQUESTS=100
    volumes:
      - ./:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - backend

  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=delayed_messaging
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d delayed_messaging"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    networks:
      - backend

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis-password}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis-password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - backend

volumes:
  postgres_data:
    name: delayed_messaging_postgres_data
  redis_data:
    name: delayed_messaging_redis_data

networks:
  backend:
    driver: bridge
    name: delayed_messaging_backend